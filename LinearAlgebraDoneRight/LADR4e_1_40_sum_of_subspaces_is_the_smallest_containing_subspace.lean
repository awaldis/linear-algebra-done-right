import Mathlib.Algebra.Module.Basic
import Mathlib.Algebra.Module.Submodule.Basic
import Mathlib.Data.Fin.Basic
import Mathlib.Algebra.BigOperators.GroupWithZero.Action

variable {ùîΩ : Type*} [Field ùîΩ]
variable {V : Type*} [AddCommGroup V] [Module ùîΩ V]

/-!
`sumSet V·µ¢` is the set of all finite sums `‚àë i, vector_list i` with each vector
chosen, one each, from a list of subspaces (`V·µ¢`)
 `vector_list i ‚àà V·µ¢ i`.
-/
def sumSet {m : ‚Ñï} (V·µ¢ : Fin m ‚Üí Submodule ùîΩ V) : Set V :=
  {x | ‚àÉ vector_list : Fin m ‚Üí V, (‚àÄ i, vector_list i ‚àà V·µ¢ i) ‚àß
   x = ‚àë i, vector_list i}

-- Let's consider a finite collection of m subspaces, indexed by Fin m.
variable {m : ‚Ñï} (V·µ¢ : Fin m ‚Üí Subspace ùîΩ V)

-- ##################################################################
-- Part 1: Show that the sum is a subspace (Explicit Proof)
-- ##################################################################

-- We first define the set of vectors that constitute the sum.
-- This is the set of all vectors `v` that can be written as a sum of
-- elements `f i`, where each `f i` is from the corresponding subspace `V·µ¢ i`.
-- def sum_carrier := {v : V | ‚àÉ f : Fin m ‚Üí V, (‚àÄ i, f i ‚àà V·µ¢ i) ‚àß v = (Finset.univ).sum f}

-- Now, we prove that this set, equipped with the vector space operations,
-- forms a subspace by proving the three required properties.
theorem sum_is_subspace :
  ‚àÉ (S : Submodule ùîΩ V), (S : Set V) = sumSet V·µ¢ := by

  -- We'll construct the subspace S by verifying all requirements
  use {

  -- The underlying set of vectors is the one defined above.
  carrier := sumSet V·µ¢

  -- Proof 1: The subspace must contain the zero vector.
  zero_mem' := by
    show 0 ‚àà sumSet V·µ¢
    unfold sumSet
    -- Current goal: 0 ‚àà {x | ‚àÉ f, (‚àÄ (i : Fin m), f i ‚àà V·µ¢ i) ‚àß x = ‚àë i, f i}

    -- We need to show that `0` can be written as a sum of vectors from the subspaces.
    -- We can achieve this by picking the zero vector from each subspace `V·µ¢ i`.
    use (fun _ => 0) -- Use the function that maps every input to the zero vector `0`.
    -- Current goal: (‚àÄ (i : Fin m), (fun x ‚Ü¶ 0) i ‚àà V·µ¢ i) ‚àß 0 = ‚àë i, (fun x ‚Ü¶ 0) i
    -- We now have two goals:
    -- 1. Show that each component `0` is in the corresponding subspace `V·µ¢ i`.
    -- 2. Show that the sum of all these zero vectors is `0`.
    constructor
    ¬∑ -- Goal 1: For any `i`, `0 ‚àà V·µ¢ i`. This is true by the definition of a subspace.
      -- Current goal: ‚àÄ (i : Fin m), 0 ‚àà V·µ¢ i OR
      --               ‚àÄ (i : Fin m), (fun x ‚Ü¶ 0) i ‚àà V·µ¢ i
      intro i
      -- Current goal: 0 ‚àà V·µ¢ i
      exact (V·µ¢ i).zero_mem
    ¬∑ -- Goal 2: The sum of `0`s is `0`.
      show 0 = ‚àë i, 0
      exact Finset.sum_const_zero.symm

  -- Proof 2: The subspace must be closed under addition.
  add_mem' := by
    -- Current goal: ‚àÄ {a b : V}, a ‚àà sumSet V·µ¢ ‚Üí b ‚àà sumSet V·µ¢ ‚Üí a + b ‚àà sumSet V·µ¢
    -- We take two arbitrary vectors `v‚ÇÅ` and `v‚ÇÇ` from our set.
    intro v‚ÇÅ v‚ÇÇ

    -- New goal: v‚ÇÅ ‚àà sumSet V·µ¢ ‚Üí v‚ÇÇ ‚àà sumSet V·µ¢ ‚Üí v‚ÇÅ + v‚ÇÇ ‚àà sumSet V·µ¢
    intro (hv‚ÇÅ_in_set : v‚ÇÅ ‚àà sumSet V·µ¢)
    -- New goal: v‚ÇÇ ‚àà sumSet V·µ¢ ‚Üí v‚ÇÅ + v‚ÇÇ ‚àà sumSet V·µ¢
    intro (hv‚ÇÇ_in_set : v‚ÇÇ ‚àà sumSet V·µ¢)
    -- New goal: v‚ÇÅ + v‚ÇÇ ‚àà sumSet V·µ¢

    -- Since v‚ÇÅ is in the set, we can extract assumptions based on the set definition.
    rcases hv‚ÇÅ_in_set with ‚ü®
      -- There exists a list of vectors associated with v‚ÇÅ that meet the other criteria.
      (v‚ÇÅlist : Fin m ‚Üí V),
      -- We can prove that each vector in the list is a member of it's respective subspace.
      (hv‚ÇÅlist_mem : ‚àÄ (i : Fin m), v‚ÇÅlist i ‚àà V·µ¢ i),
      -- We can prove that summing the list of vectors produces v‚ÇÅ.
      (hv‚ÇÅlist_sum : v‚ÇÅ = ‚àë i, v‚ÇÅlist i)‚ü©

    -- The assumption `hv‚ÇÇ` means `v‚ÇÇ` can be written as a sum using some function `f‚ÇÇ`.
    rcases hv‚ÇÇ_in_set with ‚ü®f‚ÇÇ, hf‚ÇÇ_mem, hf‚ÇÇ_sum‚ü©

    -- We need to show that `v‚ÇÅ + v‚ÇÇ` can also be written as such a sum.
    -- We propose the function `v‚ÇÅlist + f‚ÇÇ`, which maps each index `i` to `v‚ÇÅlist i + f‚ÇÇ i`.
    use (v‚ÇÅlist + f‚ÇÇ)

    -- Again, we have two goals:
    -- 1. Show that each component `v‚ÇÅlist i + f‚ÇÇ i` is in the corresponding subspace `V·µ¢ i`.
    -- 2. Show that the sum of these components equals `v‚ÇÅ + v‚ÇÇ`.
    constructor
    ¬∑ -- Goal 1: For any `i`, show `v‚ÇÅlist i + f‚ÇÇ i ‚àà V·µ¢ i`.
      intro i
      -- Since each `V·µ¢ i` is a subspace, they are all closed under addition.
      -- We know `v‚ÇÅlist i ‚àà V·µ¢ i` and `f‚ÇÇ i ‚àà V·µ¢ i`, so their sum is also in `V·µ¢ i`.
      exact (V·µ¢ i).add_mem (hv‚ÇÅlist_mem i) (hf‚ÇÇ_mem i)

    ¬∑ -- Goal 2: Show that the sum equals `v‚ÇÅ + v‚ÇÇ`.
      calc v‚ÇÅ + v‚ÇÇ
          = ‚àë i, v‚ÇÅlist i + v‚ÇÇ        := by rw [hv‚ÇÅlist_sum]
        _ = ‚àë i, v‚ÇÅlist i + ‚àë i, f‚ÇÇ i := by rw [hf‚ÇÇ_sum]
        _ = ‚àë i, (v‚ÇÅlist i + f‚ÇÇ i)    := by rw [Finset.sum_add_distrib]
        _ = ‚àë i, (v‚ÇÅlist + f‚ÇÇ) i      := by rw [Pi.add_def]

  -- Proof 3: The subspace must be closed under scalar multiplication.
  smul_mem' := by
    -- We take an arbitrary scalar `c` and a vector `v` from our set.
    intro c v hv
    -- The assumption `hv` means `v` can be written as a sum using some function `f`.
    rcases hv with ‚ü®f, hf_mem, hf_sum‚ü©
    -- We need to show `c ‚Ä¢ v` can be written as a sum.
    -- We propose the function `c ‚Ä¢ f`, which maps each index `i` to `c ‚Ä¢ f i`.
    use (c ‚Ä¢ f)
    -- Two goals, as before:
    -- 1. Show that each `c ‚Ä¢ f i` is in the subspace `V·µ¢ i`.
    -- 2. Show that the sum of these components equals `c ‚Ä¢ v`.
    constructor
    ¬∑ -- Goal 1: For any `i`, show `c ‚Ä¢ f i ‚àà V·µ¢ i`.
      intro i
      -- Since `V·µ¢ i` is a subspace, it's closed under scalar multiplication.
      -- We know `f i ‚àà V·µ¢ i`, so `c ‚Ä¢ f i` is also in `V·µ¢ i`.
--        exact Subspace.smul_mem (V·µ¢ i) c (hf_mem i)
      exact (V·µ¢ i).smul_mem c (hf_mem i)
    ¬∑ -- Goal 2: Show the sum equals `c ‚Ä¢ v`.
      -- We use the property that scalar multiplication distributes over a sum
      -- and substitute the known sum for `v`.
      calc c ‚Ä¢ v
        = c ‚Ä¢ ‚àë i, f i   := by rw [hf_sum]
      _ = ‚àë i, c ‚Ä¢ f i   := by rw [Finset.smul_sum]
      _ = ‚àë i, (c ‚Ä¢ f) i := by rw [@Pi.smul_def]
  }
  rfl
